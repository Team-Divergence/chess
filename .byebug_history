continue
bad = opponents.select { |o| o.valid_move?(king.current_position_x, king.current_position_y) }
king = @piece
bad = opponents.select { |o| o.valid_move?(king.current_position_x, king.current_position_y) }
opponents = @piece.game.pieces.where(color: 'white').to_a
@game.check?(@piece.color)
continue
 @game.check?(@piece.color)
continue
next
@game.check?(@piece.color)
continue
move_to_piece = game.pieces.find_by(current_position_x: move_to_x, current_position_y: move_to_y)
self
move_to_y
move_to_x
self.game.pieces.where(type: 'King')
self.game.pieces.where(type: 'king')
obstructed?(move_to_x, move_to_y)
next
move_to_y
move_to_x
self
continue
@game.check?(@piece.color)
continue
bad = opponents.select { |o| o.valid_move?(king.current_position_x, king.current_position_y) }
opponents = king.game.pieces.where(color: 'white').to_a
bad = opponents.select { |o| o.valid_move?(king.current_position_x, king.current_position_y) }
king = @piece
 @game.check?(@piece.color)
continue
current_position_y - move_to_y
color
has_moved
next
continue
step
next
continue
step
help
where
help
self.super
super
move_to_y
move_to_x
id
continue
contiue
comtinue
comntinue]
pawn.id
pawn.valid_move?(4, 2)
king
pawn = bad.first
bad = opponents.select { |o| o.valid_move?(king.current_position_x, king.current_position_y) }
king = @piece
game = king.game
bad = opponents.select { |o| o.valid_move?(king.current_position_x, king.current_position_y) }
opponents = @piece.game.pieces.where(color: 'white').to_a
@game.check?(@piece.color)
continue
bad.first
bad.count
bad = opponents.select { |o| o.valid_move?(king.current_position_x, king.current_position_y) }
opponents
opponents = game.pieces.where(color: 'white').to_a
game = king.game
king = @piece
opponents = @piece.game.pieces.where(color: 'white').to_a
@game.check?(@piece.color)
@piece
king
@piece.update_attributes(current_position_x: x, current_position_y: y)
y
x
@piece.valid_move?(x, y)
@piece
